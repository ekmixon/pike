package {{.Name}}

import (
	"database/sql"
)

{{- range $entityIx, $entity := .Entities }}

func (storage *PostgreStorage) Create{{$entity.ProtoCapsName}}(in *{{$entity.ProtoCapsName}}) (*{{$entity.ProtoCapsName}}, error) {
	stmt, err := storage.db.Prepare(`
		INSERT INTO {{$entity.SQLTableName}}(
			{{- range $ix, $field := $entity.FieldsForInsert}}
			{{$field.Name}}{{- if not (last $ix $entity.FieldsForInsert)}},{{- end}}
			{{- end }}
		)
		VALUES ({{- range $ix, $field := $entity.FieldsForInsert}}${{inc $ix}}{{- if not (last $ix $entity.FieldsForInsert)}},{{- end}}{{- end }})
		RETURNING {{$entity.PrimaryKeyField.Name}};
	`)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	err = stmt.QueryRow(
		{{- range $ix, $field := $entity.FieldsForInsert}}
		 in.{{$field.GoName}},
		{{- end }}
	).Scan(
		&(in.{{$entity.PrimaryKeyField.GoName}}),
	)

	return in, err
}


func (storage *PostgreStorage) Delete{{$entity.ProtoCapsName}}(id {{$entity.PrimaryKeyField.GoType}}) error {
	stmt, err := storage.db.Prepare("DELETE FROM {{$entity.SQLTableName}} WHERE {{$entity.PrimaryKeyField.Name}}=$1;")
	if err != nil {
		return err
	}
	defer stmt.Close()

	_, err = stmt.Exec(id)
	if err != nil {
		return err
	}

	return nil
}


func (storage *PostgreStorage) Get{{$entity.ProtoCapsName}}(id {{$entity.PrimaryKeyField.GoType}}) (*{{$entity.ProtoCapsName}}, error) {
	stmt, err := storage.db.Prepare(`
		SELECT
			{{- range $ix, $field := $entity.Fields}}
			{{$field.Name}}{{- if not (last $ix $entity.Fields)}},{{- end}}
			{{- end }}
		FROM {{$entity.SQLTableName}}
		WHERE {{$entity.PrimaryKeyField.Name}}=$1;
	`)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	ret := &{{$entity.ProtoCapsName}}{}
	err = stmt.QueryRow(id).Scan(
		{{- range $ix, $field := $entity.Fields}}
		&ret.{{$field.GoName}},
		{{- end }}
	)
	if err != nil {
		return nil, err
	}

	return ret, nil
}


func (storage *PostgreStorage) Update{{$entity.ProtoCapsName}}(updated *{{$entity.ProtoCapsName}}) (*{{$entity.ProtoCapsName}}, error) {
	ret := &{{$entity.ProtoCapsName}}{}
	txError := storage.transact(func(tx *sql.Tx) (err error) {
		stmt, err := tx.Prepare(`
			UPDATE {{$entity.SQLTableName}}
			SET
				{{- range $ix, $field := $entity.NonPrimaryKeyFields}}
				{{$field.Name}}=${{inc $ix}}{{- if not (last $ix $entity.NonPrimaryKeyFields)}},{{- end}}
				{{- end }}
			WHERE
				{{$entity.PrimaryKeyField.Name}}=${{inc (len $entity.Fields)}}
			RETURNING
				{{- range $ix, $field := $entity.Fields}}
				{{$field.Name}}{{- if not (last $ix $entity.Fields)}},{{- end}}
				{{- end }}
			;
		`)
		if err != nil {
			return
		}

		err = stmt.QueryRow(
			{{- range $ix, $field := $entity.NonPrimaryKeyFields}}
			updated.{{$field.GoName}},
			{{- end }}
		).Scan(
			{{- range $ix, $field := $entity.Fields}}
			&ret.{{$field.GoName}},
			{{- end }}
		)
		return
	})

	return ret, txError
}
{{- end }}
