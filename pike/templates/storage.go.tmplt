package {{.Name}}

import (
	"database/sql"
	_ "github.com/lib/pq"
	"time"
)

type PostgreStorage struct {
	db  *sql.DB
	uri string
}

func NewPostgreStorage(uri string) (*PostgreStorage, error) {
	ret := &PostgreStorage{
		uri: uri,
	}

	err := ret.Connect()
	return ret, err
}

func (storage *PostgreStorage) Connect() error {
	db, err := sql.Open("postgres", storage.uri)
	if err != nil {
		return err
	}

	storage.db = db
	db.SetMaxOpenConns(3)
	db.SetMaxIdleConns(3)
	db.SetConnMaxLifetime(30 * time.Minute)
	return err
}


func (storage *PostgreStorage) transact(txFunc func(*sql.Tx) error) (err error) {
	tx, err := storage.db.Begin()
	if err != nil {
		return
	}
	defer func() {
		if p := recover(); p != nil {
			_ = tx.Rollback()
			panic(p) // re-throw panic after Rollback
		} else if err != nil {
			_ = tx.Rollback() // err is non-nil; don't change it
		} else {
			err = tx.Commit() // err is nil; if Commit returns error update err
		}
	}()
	err = txFunc(tx)
	return err
}
